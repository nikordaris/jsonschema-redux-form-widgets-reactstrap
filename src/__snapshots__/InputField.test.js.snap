// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render InputFields Should render ColorInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={true}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  untouch={[Function]}
  valid={false}
  warning={undefined}
>
  <label
    className=""
    htmlFor="ColorInputField"
    id="ColorInputField-label"
  >
    ColorInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id="ColorInputField"
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={true}
    name="ColorInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    style={
      Object {
        "height": "40px",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="color"
    untouch={[Function]}
    valid={false}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render DateInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={true}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  untouch={[Function]}
  valid={false}
  warning={undefined}
>
  <label
    className=""
    htmlFor="DateInputField"
    id="DateInputField-label"
  >
    DateInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id="DateInputField"
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={true}
    name="DateInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    style={undefined}
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="date"
    untouch={[Function]}
    valid={false}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render DateTimeInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={true}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  untouch={[Function]}
  valid={false}
  warning={undefined}
>
  <label
    className=""
    htmlFor="DateTimeInputField"
    id="DateTimeInputField-label"
  >
    DateTimeInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id="DateTimeInputField"
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={true}
    name="DateTimeInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    style={undefined}
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="datetime-local"
    untouch={[Function]}
    valid={false}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render EmailInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={true}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  untouch={[Function]}
  valid={false}
  warning={undefined}
>
  <label
    className=""
    htmlFor="EmailInputField"
    id="EmailInputField-label"
  >
    EmailInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id="EmailInputField"
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={true}
    name="EmailInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    style={undefined}
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="email"
    untouch={[Function]}
    valid={false}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render InputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={true}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  untouch={[Function]}
  valid={false}
  warning={undefined}
>
  <label
    className=""
    htmlFor="InputField"
    id="InputField-label"
  >
    InputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id="InputField"
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={true}
    name="InputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    style={undefined}
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="text"
    untouch={[Function]}
    valid={false}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render NumberInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={true}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  untouch={[Function]}
  valid={false}
  warning={undefined}
>
  <label
    className=""
    htmlFor="NumberInputField"
    id="NumberInputField-label"
  >
    NumberInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id="NumberInputField"
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={true}
    name="NumberInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    style={undefined}
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="number"
    untouch={[Function]}
    valid={false}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render PasswordInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={true}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  untouch={[Function]}
  valid={false}
  warning={undefined}
>
  <label
    className=""
    htmlFor="PasswordInputField"
    id="PasswordInputField-label"
  >
    PasswordInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id="PasswordInputField"
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={true}
    name="PasswordInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    style={undefined}
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="password"
    untouch={[Function]}
    valid={false}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render SelectInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={true}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  untouch={[Function]}
  valid={false}
  warning={undefined}
>
  <label
    className=""
    htmlFor="SelectInputField"
    id="SelectInputField-label"
  >
    SelectInputField
  </label>
  <select
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id="SelectInputField"
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={true}
    name="SelectInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    style={undefined}
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    untouch={[Function]}
    valid={false}
    value=""
    warning={undefined}
  >
    <option
      defaultValue={true}
      disabled={true}
    >
      Select 
      SelectInputField
       
    </option>
    <option
      value={2}
    >
      bar
    </option>
    <option
      value={1}
    >
      foo
    </option>
  </select>
</div>
`;

exports[`Render InputFields Should render SelectInputField with groups 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={true}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  untouch={[Function]}
  valid={false}
  warning={undefined}
>
  <label
    className=""
    htmlFor="SelectInputField"
    id="SelectInputField-label"
  >
    SelectInputField
  </label>
  <select
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id="SelectInputField"
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={true}
    name="SelectInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    style={undefined}
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    untouch={[Function]}
    valid={false}
    value=""
    warning={undefined}
  >
    <option
      defaultValue={true}
      disabled={true}
    >
      Select 
      SelectInputField
       
    </option>
    <optgroup
      label="Bar Group"
    >
      <option
        value={1}
      >
        bar
      </option>
      <option
        value={2}
      >
        bar2
      </option>
    </optgroup>
    <optgroup
      label="Foo Group"
    >
      <option
        value={1}
      >
        foo
      </option>
      <option
        value={2}
      >
        foo2
      </option>
    </optgroup>
  </select>
</div>
`;

exports[`Render InputFields Should render SelectInputField with only values 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={true}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  untouch={[Function]}
  valid={false}
  warning={undefined}
>
  <label
    className=""
    htmlFor="SelectInputField"
    id="SelectInputField-label"
  >
    SelectInputField
  </label>
  <select
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id="SelectInputField"
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={true}
    name="SelectInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    style={undefined}
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    untouch={[Function]}
    valid={false}
    value=""
    warning={undefined}
  >
    <option
      defaultValue={true}
      disabled={true}
    >
      Select 
      SelectInputField
       
    </option>
    <option
      value="bar"
    >
      bar
    </option>
    <option
      value="foo"
    >
      foo
    </option>
  </select>
</div>
`;

exports[`Render InputFields Should render TextAreaInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={true}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  untouch={[Function]}
  valid={false}
  warning={undefined}
>
  <label
    className=""
    htmlFor="TextAreaInputField"
    id="TextAreaInputField-label"
  >
    TextAreaInputField
  </label>
  <textarea
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id="TextAreaInputField"
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={true}
    name="TextAreaInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    style={undefined}
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    untouch={[Function]}
    valid={false}
    value=""
    warning={undefined}
  />
</div>
`;
